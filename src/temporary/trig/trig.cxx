// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file trig.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "trig.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define Trig_max_cdr_typesize 16ULL;
#define Trig_max_key_cdr_typesize 0ULL;

Trig::Trig()
{
    // double m_sine
    m_sine = 0.0;
    // double m_other
    m_other = 0.0;

}

Trig::~Trig()
{


}

Trig::Trig(
        const Trig& x)
{
    m_sine = x.m_sine;
    m_other = x.m_other;
}

Trig::Trig(
        Trig&& x) noexcept 
{
    m_sine = x.m_sine;
    m_other = x.m_other;
}

Trig& Trig::operator =(
        const Trig& x)
{

    m_sine = x.m_sine;
    m_other = x.m_other;

    return *this;
}

Trig& Trig::operator =(
        Trig&& x) noexcept
{

    m_sine = x.m_sine;
    m_other = x.m_other;

    return *this;
}

bool Trig::operator ==(
        const Trig& x) const
{

    return (m_sine == x.m_sine && m_other == x.m_other);
}

bool Trig::operator !=(
        const Trig& x) const
{
    return !(*this == x);
}

size_t Trig::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Trig_max_cdr_typesize;
}

size_t Trig::getCdrSerializedSize(
        const Trig& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void Trig::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_sine;
    scdr << m_other;

}

void Trig::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_sine;
    dcdr >> m_other;
}

/*!
 * @brief This function sets a value in member sine
 * @param _sine New value for member sine
 */
void Trig::sine(
        double _sine)
{
    m_sine = _sine;
}

/*!
 * @brief This function returns the value of member sine
 * @return Value of member sine
 */
double Trig::sine() const
{
    return m_sine;
}

/*!
 * @brief This function returns a reference to member sine
 * @return Reference to member sine
 */
double& Trig::sine()
{
    return m_sine;
}

/*!
 * @brief This function sets a value in member other
 * @param _other New value for member other
 */
void Trig::other(
        double _other)
{
    m_other = _other;
}

/*!
 * @brief This function returns the value of member other
 * @return Value of member other
 */
double Trig::other() const
{
    return m_other;
}

/*!
 * @brief This function returns a reference to member other
 * @return Reference to member other
 */
double& Trig::other()
{
    return m_other;
}



size_t Trig::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return Trig_max_key_cdr_typesize;
}

bool Trig::isKeyDefined()
{
    return false;
}

void Trig::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}
