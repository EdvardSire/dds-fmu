#+latex_class: sintefmemo
#+latex_class_options: [unrestricted]
#+latex_compiler: xelatex
#+latex_header: % default org-mode packages above this line
#+latex_header: \usepackage[sorting=none,bibstyle=numeric,citestyle=numeric-comp]{biblatex}
#+latex_header: \usepackage{csquotes} % Recommended for BibLaTeX. Also provides \textelp
#+latex_header: \usepackage{url}
#+latex_header: \usepackage{units}
#+latex_header: \usepackage{caption}
#+latex_header: \usepackage{subcaption}
#+latex_header: \usepackage[acronym]{glossaries}
#+latex_header: %\usepackage{draftwatermark}
#+latex_header_extra: \newtheorem{assumption}{Assumption}
#+latex_header_extra: \crefname{assumption}{Assumption}{Assumptions}

#+latex_header_extra: \title{DDS--FMU}
#+latex_header_extra: \author{Joakim Haugen}
#+latex_header_extra: \project{302005160}

#+latex_header_extra: \let\maketitle\relax % disable \maketitle
#+latex_header_extra: \addbibresource{../user/bibs.bib}

#+TITLE: DDS-FMU: User documentation
#+OPTIONS: toc:nil author:nil
#+KEYWORDS: DDS FMU

@@latex:\frontmatter@@

* Introduction

  + *=dds-fmu= main rationale*: integrate DDS-based software in FMI simulations.
  + *Core feature*: Incorporates DDS signals in FMI simulations in a simple manner.
  + *No need for code compilation*: Just 1) decompress the FMU; 2) configure it; 3) zip it back to an FMU.
  + For *Quick start*: jump to cref:sec:quickstart.

  #+name: fig:system-context
  #+begin_src plantuml :exports results :file images/system-overview.svg
    !include style.puml
    skinparam linetype polyline
    skinparam nodesep 50
    !include <C4/C4_Context.puml>
    !include <C4/C4_Container.puml>
    !include <tupadr3/font-awesome-5/language.puml>
    'LAYOUT_WITH_LEGEND()
    skinparam ranksep 100
    'title DDS-FMU Concept

    !$ddslogo="img:images/DDS-logo.png"
    !$fmilogo="img:images/FMI_logo.png"

    System(dds, "", "DDS Realm", $sprite="$ddslogo")
    Container(ddsfmu, "DDS-FMU", "DDS, FMI, xTypes", "DDS-FMI conversion", "language")
    System(fmi, "", "FMI Realm", $sprite="$fmilogo")

    AddRelTag("FMI to DDS", $textColor="GoldenRod", $lineColor="GoldenRod")
    AddRelTag("DDS to FMI", $textColor="Teal", $lineColor="Teal")

    Rel_Right(dds, ddsfmu, "Inputs", "DDS", $tags="DDS to FMI")
    Rel_Right(ddsfmu, fmi, "Outputs", "FMI", $tags="DDS to FMI")

    Rel_Left(ddsfmu, dds, "Outputs", "DDS", $tags="FMI to DDS")
    Rel_Left(fmi, ddsfmu, "Inputs", "FMI", $tags="FMI to DDS")

    SHOW_FLOATING_LEGEND()
    Lay_Distance(LEGEND(), fmi, -1)

  #+end_src



  #+name: fig:system-container
  #+caption: System overview for DDS-FMU.
  #+attr_org: :width 700
  #+attr_latex: :width 0.76\textwidth
  #+RESULTS: fig:system-context
  [[file:images/system-overview.svg]]

  OMG DDS cite:omg-dds-2015 is a standard for a data-centric publish and subscribe scheme,
  which is devised by the Object Management Group (OMG). It defines a set of quality of
  services (QoS) for data distribution service (DDS). This includes APIs and communication
  semantics, where real-time publish subscribe (RTPS) cite:omg-dds-rtps-2022 is one such
  protocol that aims to provide interoperability between DDS implementations from
  different vendors.

  Functional mock-up interface (FMI) cite:fmi-standard-2023 is a widely used standard that
  defines containers and interfaces for exchanging dynamical simulation models. As defined
  by the FMI standard, an FMU (Functional Mock-up Unit) is essentially a zip archive that
  implements the FMI standard for a specific 'system' in form of binaries, code,
  configuration files, et cetera.

  DDS can be used as a communication middleware for components in a software system. These
  components can consist of graphical user interfaces, hardware instruments, software
  components, for instance control systems or business logic units.  Suppose one such
  component is a control system module or sensor acquisition module. If the purpose is to
  use the DDS component together with other FMUs, one needs to somehow translate between
  the different APIs. One option is to integrate the DDS component directly in an FMU, but
  this requires access to the software code for proper integration. An alternative, less
  invasive, approach is to use an adaptation layer that translates between DDS and
  FMI. =dds-fmu= implements the latter approach and is inspired by eProsima's Integration
  Service cite:eprosima-integration-service-2023.

* Usage label:sec:quickstart

  A typical workflow can be summarised with these main steps:
  - Decompress the FMU: =unzip dds-fmu.fmu=
  - Edit configuration files in =resources/config/=, see details in cref:sec:configuration.
  - [ ] Make bundled tool executable (Linux): =chmod +x resources/tools/linux64/repacker=
  - Create a new FMU: =resources/tools/linux64/repacker create -v -o new/dds-fmu.fmu .=

** Configuration label:sec:configuration

   Preparing the FMU for a customised setup is done by editing configuration files, which
   are located in the =resources= folder. The layout of this folder can be seen in cref:fig:resources.
   Typically, a customisation consists of editing three files, which will be elaborated below:
   1. =dds-fmu.idl= Data type specification with IDL files (cref:sec:idl).
   2. =ddsfmu_mapping.xml= DDS-to-FMU mapping (cref:sec:ddsfmu).
   3. =dds_profile.xml= Fast-DDS XML profiles (cref:sec:profiles).

   #+begin_src plantuml :exports results :file images/resources.svg
     @startsalt
     {
     {T
     +resources
     ++ config
     +++ dds
     ++++ ddsfmu_mapping.xml
     ++++ dds_profile.xml
     +++ idl
     ++++ dds-fmu.idl
     ++++ misc.idl
     +++ modelDescription.xml
     ++ tools
     +++ linux64
     ++++ repacker
     }
     }
     @endsalt
   #+end_src

   #+name: fig:resources
   #+caption: Folder structure of the resources directory.
   #+RESULTS:
   [[file:images/resources.svg]]

*** Data type specification with IDL label:sec:idl

    The IDL standard cite:omg-idl-2018 is a descriptive way to define data types and
    more. We make use of it to define data structures on DDS that we want to integrate
    with FMU. The basic notation is not unlike regular C++ and in cref:code:idl-example we
    provide an example, which cover many use cases.

    #+name: code:idl-example
    #+caption: An example IDL snippet of namespaced data types.
    #+begin_src C :exports code
      #pragma once

      /// A module translates to namespaces in C++
      module idl {

        /// An enum with SLEEP=0, OKAY=1 etc.
        enum MyEnum { SLEEP, OKAY, ALERT, FAILURE, DEAD };

        /// A class with member variables
        struct Klass {
          string str;      ///< A std::string
          uint8 ui8;       ///< Unsigned integer 8-bit
          int32 i32;       ///< Signed integer 32-bit
          int64 i64;       ///< 8, 16, 32, 64, int and uint, are supported
          double d_val;    ///< Double precision floating point float64
          float f_val;     ///< Single precision floating point float32
          boolean enabled; ///< Boolean
          MyEnum status;   ///< Enum type
          float my_array [10];     ///< 1D array of floats
          uint32 my_matrix [3][2]; ///< 2D array of unsigned integers
        };

      };
    #+end_src

    Suppose the contents in cref:code:idl-example are added to a new file
    =resources/config/idl/mine.idl=. By writing =#include "mine.idl"= in =dds-fmu.idl=,
    the file will be parsed by the FMU, and =idl::Klass= becomes available as a type.

*** DDS-to-FMU mapping label:sec:ddsfmu

    The file =ddsfmu_mapping.xml= contains elements that specify which DDS topics to map
    to FMU inputs and outputs, see cref:fig:ddsfmu. The /topic/ attribute is a name
    identifier for a DDS Topic entity. Each topic is associated with a data /type/, which
    in our case is defined by our IDL files. Note that *FMU outputs* are *subscribed* DDS
    signals, and *FMU inputs* are *published* DDS signals. *DDS input = FMU output* and
    *DDS output = FMU inputs*.  The user defines the necessary of FMU inputs and outputs
    using =<fmu_in>= and =<fmu_out>= elements, respectively. See cref:code:ddsfmu-example
    for an example. For each element of =<fmu_in>= a DDS DataWriter is created, and
    likewise, for each =<fmu_out>= a DDS DataReader.

    #+name: fig:ddsfmu
    #+begin_src plantuml :exports results :file images/ddsfmu-mapping.svg
      @startyaml
        ddsfmu_mapping.xml:
           <ddsfmu>:
             <fmu_in> [0..*]:
               topic: "DDS topic name (string)"
               type: "DDS type name (string)"
             <fmu_out> [0..*]:
               topic: "DDS topic name (string)"
               type: "DDS type name (string)"
      @endyaml
    #+end_src

    #+name: fig:ddsfmu
    #+caption: =ddsfmu_mapping= XML specification.
    #+attr_org: :width 700px
    #+attr_latex: :scale 0.70
    #+RESULTS: fig:ddsfmu
    [[file:images/ddsfmu-mapping.svg]]

    #+name: code:ddsfmu-example
    #+caption: An example =ddsfmu_mapping.xml= file.
    #+begin_src xml :exports code
      <ddsfmu>
        <fmu_in topic="ToPublish" type="idl::Klass" />
        <fmu_out topic="ToSubscribe" type="idl::Klass" />
      </ddsfmu>
    #+end_src

*** Fast-DDS XML profiles label:sec:profiles

    A user can configure the Fast-DDS to a great extent by means of XML profiles.  Central
    concepts such as domain id, QoS (like durability and reliability), and much more are
    configured using configuration profiles for various DDS entities. These profiles are
    loaded by purposefully specifying the =profile_name= attribute for an element type,
    see cref:fig:ddsxml. The profiles for /participant/, /publisher/, and /subscriber/ are
    attempted loaded by ~profile_name="dds-fmu-default"~, with fallback to builtin default
    QoS. Profiles for =data_writer= and =data_reader= elements are attempted loaded by
    ~profile_name="[topic]"~, where /topic/ is as defined in cref:fig:ddsfmu, with
    fallback to default QoS. This means that the user can specify custom profiles for
    specific =data_reader= and =data_writer= topics. XML profile documentation for each
    DDS entity type can be found on Fast-DDS online documentation
    cite:eprosima-fast-dds-xml-profiles-2023. The FMU comes with an example
    =dds_profile.xml=, which can be edited as needed.

    #+name: fig:ddsxml
    #+begin_src plantuml :exports results :file images/xml-profiles.svg
      @startyaml
        dds_profile.xml:
           <dds>:
             <participant> [0..1]:
               profile_name: dds-fmu-default
             <publisher> [0..1]:
               profile_name: dds-fmu-default
             <subscriber> [0..1]:
               profile_name: dds-fmu-default
             <data_writer> [0..n_w]:
               profile_name: "DDS topic name"
             <data_reader> [0..n_r]:
               profile_name: "DDS topic name"
      @endyaml
    #+end_src

    #+name: fig:ddsxml
    #+caption: =dds_profile= XML layout, where =n_w= is number of data readers and =n_r= is number of data readers.
    #+attr_org: :width 700px
    #+attr_latex: :scale 0.70
    #+RESULTS: fig:ddsxml
    [[file:images/xml-profiles.svg]]

* Implementation overview

  DDS supports data exchange of user-defined data structures. These are often defined
  using an interface definition language (IDL), whose grammar is specified by the OMG IDL
  cite:omg-idl-2018. What the IDL files defines, can be represented as dynamic types
  through the XTypes API specification cite:omg-dds-xtypes-2020. =dds-fmu= makes use of
  this standard through a vendor implementation, namely =eProsima xtypes=
  cite:eprosima-xtypes-2023. Moreover, =dds-fmu= uses =eProsima Fast-DDS=
  cite:eprosima-fast-dds-2023, which implements DDS RTPS. =dds-fmu= parses IDL files into
  xtypes DynamicData and, with the help of code taken from
  cite:eprosima-integration-service-2023, converts between xtypes DynamicData and Fast-DDS
  DynamicData. As a result, =dds-fmu= supports DDS communication with data types defined
  in IDL files without the need for code compilation. The xTypes API facilitates access to
  members of DynamicData in a way that infers the type kind of each member. =dds-fmu=
  makes use of this feature to ensure that each member is read or write accessed as the
  appropriate primitive type, as supported from the FMU side. Since =dds-fmu= is a
  co-simulation FMU, the implementation of the API is achieved with the help of =cppfmu=
  cite:cppfmu-2023. Currently, =dds-fmu= supports FMI 2.0, which means that there are some
  limitations in terms of mapping from DynamicData member types to FMI types, see
  cref:tab:mapping for an overview of supported data type mapping.

  #+name: tab:mapping
  #+caption: Mapping between primitive types and FMI types.
  | Type kind   | FMI 2.0 type | Comment |   | Type kind     | Comment |
  |-------------+--------------+---------+---+---------------+---------|
  | boolean     | fmiBoolean   |         |   | long double   | N/A     |
  | int8        | fmiInteger   |         |   | char16        | N/A     |
  | uint8       | fmiInteger   |         |   | wide char     | N/A     |
  | int16       | fmiInteger   |         |   | bitset        | N/A     |
  | uint16      | fmiInteger   |         |   | sequence type | N/A     |
  | int32       | fmiInteger   |         |   | wstring       | N/A     |
  | uint32      | fmiReal      |         |   | map type      | N/A     |
  | int64       | fmiReal      | Lossy   |   |               |         |
  | uint64      | fmiReal      | Lossy   |   |               |         |
  | float       | fmiReal      |         |   |               |         |
  | double      | fmiReal      |         |   |               |         |
  | string      | fmiString    |         |   |               |         |
  | char8       | fmiString    |         |   |               |         |
  | enumeration | fmiInteger   |         |   |               |         |


** Data structure /demultiplexing/ and model description

   An IDL data structure can be complex, with non-primitive types and nested data
   structures. These members needs to be demultiplexed in a way that allows the scalar
   variable access interface of FMI 2.0 to read or write member variables. This must be
   done in a manner that correctly casts to their primitive type. While parsing a
   requested DynamicData variable, =dds-fmu= instantiates visitor functions for read and
   write, with appropriate reference to the DynamicData's primitive type, as well as
   casting for input and output types. These visitor functions are stored in vectors in
   such a way that with so-called value references, they can be directly accessed by FMU
   setters and getters.

   =dds-fmu= comes bundled with an executable command line tool for generating
   =modelDescription.xml=. In short: given =IDL= files, Fast-DDS configuration files, and
   a DDS-to-FMU mapping specification, the tool automatically generates
   =modelDescription.xml=. The output model description creates =<ModelVariables>=
   elements with =<ScalarVariable>= entries, and =<ModelStructure>= element with
   =<Outputs>=. All the =<ScalarVariables>= entries have attribute ~variability=discrete~
   and consist solely of inputs and outputs: ~causality=input|output~. The generated
   =<ScalarVariable>= entries have =name= attribute based on the FMI standard's
   =structured= variable naming convention. The variable name is constructed as
   ~name=[topic name].[structured name]~, where =topic name= is as prescribed in the
   DDS-to-FMU mapping specification file.

** Configuration of DDS entities and QoS settings

   Each instance of =dds-fmu= only creates a single DDS Participant, DDS Publisher, and
   DDS Subscriber. As a consequence, the QoS settings for these entities will be the same
   for all DDS DataReaders and DDS DataWriters in the current FMU instance. However, it is
   possible to specify QoS for each DataReader and DataWriter. The QoS settings for all
   mentioned entities are set through Fast-DDS XML profiles. These profiles are documented
   in the [[https://fast-dds.docs.eprosima.com/en/latest/fastdds/xml_configuration/making_xml_profiles.html][Fast-DDS documentation]] cite:eprosima-fast-dds-xml-profiles-2023. This setup may
   not suit complex use cases. Then, one approach would entail splitting the DDS mapping
   into multiple FMUs. For details on how to do profile configuration, see
   cref:sec:quickstart.

** Data flow

   The interaction with DDS reader and writer entities are done in each call to DoStep()
   on the FMI side. Writing DDS data is done before reading. If the reader QoS is
   configured to have history greater than one, all data is fetched, but only the latest
   sample is kept. Effectively, this approach is a sample and hold. See cref:fig:sequence
   for a sequence diagram of DoStep().

   #+begin_src plantuml :exports results :file images/sequence.svg
     @startuml
     participant "dds-fmu" as dds_fmu
     entity Converter
     entity "DataReader[i]" as reader
     entity "DataWriter[j]" as writer
     group DoStep()

     loop j=range(DataWriters)
                     dds_fmu -> Converter : Convert XTypes to Fast-DDS
                     Converter --> dds_fmu : Conversion done: data[j]
                     dds_fmu -> writer : Write data[j] to DDS
     end
     loop i=range(DataReaders)
        loop have_data==true
                     dds_fmu -> reader : Take next sample from DDS
                     reader --> dds_fmu : have_data
                     alt have_data
                             dds_fmu -> Converter : Convert Fast-DDS to XTypes
                             Converter --> dds_fmu : Conversion done: data[i]
                     end
        end
     end
     end
     @enduml
   #+end_src

   #+name: fig:sequence
   #+caption: Sequence of actions in DoStep().
   #+attr_org: :width 700px
   #+attr_latex: :scale 0.70
   #+RESULTS:
   [[file:images/sequence.svg]]

** Limitations and caveats

   There are some things the user should be aware of to avoid unnecessary
   frustration. Below we list several points and in some cases suggest workarounds.
   - Lost samples :: Only the last read sample is kept. Samples may therefore be lost, decrease step size.
   - Old samples lingers :: There is no expiration of sampled data. Frozen signals are not detected.
   - Sending to itself is possible :: The data flow is implemented so that write occurs
     before read; there will be a sample lag.
   - Loss of precision :: Some data types cannot easily be represented with available FMI
     2.0 types. In such cases, another data type is used, which may lead to loss of
     precision.
   - Several FMU instances is conditionally possible :: Do not use multiple =dds-fmu=
     instances in the simulator instance if they are on the same DDS Domain ID. There are
     workarounds for some simulators. In the case of =cosim= cite:cosim-2023 you can use
     =proxyfmu= cite:cosim-2023-proxyfmu on additional =dds-fmu= instances.

** Missing features

   + Integration of fast-dds/xtypes logging into cppfmu logging if possible
   + Sequence types, e.g. =std::vector<TYPE>=
   + Exploiting IDL attributions, especially =@key= and =@optional=.
   + FMI 3.0 support

@@latex:\printbibliography[heading=bibintoc,title={\refname}]@@

* Local Variables :noexport:
Local Variables:
org-latex-classes: (("sintefmemo" "\\documentclass{sintefmemo}"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
org-latex-pdf-process: ("latexmk -shell-escape -xelatex -pdf -bibtex %f")
org-latex-image-default-width: ""
org-image-actual-width: nil
End:

  It seems these local variables have no effect unless it is the final section.
  [[https://stackoverflow.com/questions/20033467/setting-a-local-file-variable-in-emacs-org-mode][setting local file variable]].
